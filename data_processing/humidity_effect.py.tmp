import numpy as np
import matplotlib.pyplot as plt
from hygrometer_calibration.calibration_function import correct_humidity

# now import pylustrator
import pylustrator

# activate pylustrator
pylustrator.start()


file_list = [
'experimental_data\\improved_kp_kelvinprobe\\20191015_5cm_3in_62RH_eq30min_oldPDMS5to1_PMMAtol_uniformspeeds_0p1_B01_copy',

'F:\\PDMS-PMMA_delamination_experiments\\kelvin_probe\\'
'20191125_5cm_3in_60RH_ambRH43_eq30min_newPDMS5to1_PMMAtol_newwire_uniformspeeds_slowstart_dark_0p4_A01',

'experimental_data\\improved_kp_kelvinprobe\\20191030_5cm_3in_50RH_ambRH38_eq30min_newPDMS5to1_PMMAtol_uniformspeeds_0p5_C01_copy',

'experimental_data\\improved_kp_kelvinprobe\\20191107_5cm_3in_41RH_ambRH36_eq30min_newPDMS5to1_PMMAtol_newwire_uniformspeeds_slowstart_0p3_B01',

'experimental_data\\improved_kp_kelvinprobe\\20191120_5cm_3in_72RH_ambRH21_eq30min_newPDMS5to1_PMMAtol_newwire_uniformspeeds_slowstart_0p5_D01_2',

'experimental_data\\improved_kp_kelvinprobe\\20191123_5cm_3in_70RH_ambRH44_eq30min_newPDMS5to1_PMMAtol_newwire_uniformspeeds_slowstart_dark_0p4_B01',

'experimental_data\\improved_kp_kelvinprobe\\20191113_70RH_B01',

'experimental_data\\improved_kp_kelvinprobe\\20191118_77RH_B01',

'experimental_data\\improved_kp_kelvinprobe\\20191108_5cm_3in_31RH_ambRH32_eq30min_newPDMS5to1_PMMAtol_newwire_uniformspeeds_slowstart_0p3_E01'
]
data = []
rh_analog = [62, 60, 50, 41, 72, 70, 70, 77, 31]
rh_true = [correct_humidity(x, calibration_folder='hygrometer_calibration/') for x in rh_analog]
for folder in file_list:
    filename = folder + '\\' + 'max_density_metrics.txt'
    data_here = np.loadtxt(filename, delimiter='\t', skiprows=1)
    data.append(data_here)
        # data = np.append(data_here, data, axis=1)
data = np.vstack(data)
plt.plot(rh_analog, data[:,0], 'o', label='(SKP) Positive peak on histogram of charge density', color='C1')
plt.plot(rh_analog, data[:,1], 'o', label='(SKP) Maximum value of positive charge density', color='C2')
plt.xlabel('Relative humidity, %')
plt.ylabel('Estimated initial charge density, nC$\cdot$cm$^{-2}$')
plt.legend()
#% start: automatic generated code from pylustrator
plt.figure(1).ax_dict = {ax.get_label(): ax for ax in plt.figure(1).axes}
import matplotlib as mpl
plt.figure(1).axes[0].set_position([0.179688, 0.118333, 0.743750, 0.815833])
plt.figure(1).axes[0].spines['right'].set_visible(False)
plt.figure(1).axes[0].spines['top'].set_visible(False)
plt.figure(1).axes[0].add_patch(mpl.patches.FancyArrowPatch((28.7, 1.0217803830948524), (54.0, 5.450206156325233), arrowstyle='Simple,head_length=10,head_width=10,tail_width=2', facecolor='black', clip_on=False, zorder=2))  # id=plt.figure(1).axes[0].patches[0].new
plt.figure(1).axes[0].patches[0].set_positions((28.699999999999946, 1.021780383094846), (41.709560723514144, 3.317468635667737))
#% end: automatic generated code from pylustrator
plt.show()
print(1)